{"version":3,"sources":["components/user.js","components/users.js","components/addUser.js","components/posts.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","_this2","onSelectUser","_this$state$user","name","username","react_default","a","createElement","className","onClick","React","Component","Users","users","request","Request","fetch","then","res","json","data","setState","length","listItems","map","components_user","key","id","href","AddUser","onNameChange","event","target","value","onUsernameChange","onAddUser","method","headers","Content-Type","body","JSON","stringify","response","console","log","type","onChange","Posts","posts","selectedUser","_this$props$selectedU","post","title","Navigation","_ref","onRouteChange","App","route","bind","assertThisInitialized","page","components_users","addUser","components_posts","navigation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c888bc5a.chunk.js","sourcesContent":["import React from \"react\";\n\nclass User extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { user: props.user };\n    }\n\n    render() {\n        const { onSelectUser } = this.props;\n        const { name, username } = this.state.user;\n\n        return (\n            <div>\n                <li\n                    className=\"ph3 pv2 b--light-silver pointer grow\"\n                    onClick={() => onSelectUser(this.state.user)}\n                >\n                    <strong>{name}</strong> - {username}\n                </li>\n            </div>\n        );\n    }\n}\n\nexport default User;\n","import React from \"react\";\nimport User from \"./user\";\n\nclass Users extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { users: [] };\n    }\n\n    componentDidMount() {\n        const request = new Request(\n            \"https://jsonplaceholder.typicode.com/users\"\n        );\n\n        fetch(request)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({ users: data });\n            });\n    }\n\n    render() {\n        const { onSelectUser } = this.props;\n        const users = this.state.users;\n        if (users.length !== 0) {\n            let listItems = users.map(user => {\n                return (\n                    <User\n                        key={user.id}\n                        user={user}\n                        onSelectUser={onSelectUser}\n                    />\n                );\n            });\n            return (\n                <div>\n                    <h2>Users</h2>\n                    <ul className=\"list\">{listItems}</ul>\n                    <p className=\"black-20\">\n                        <a\n                            className=\"black-20\"\n                            href=\"https://jsonplaceholder.typicode.com/users\"\n                        >\n                            https://jsonplaceholder.typicode.com/users\n                        </a>\n                    </p>\n                </div>\n            );\n        } else {\n            return <h2>Loading list of users</h2>;\n        }\n    }\n}\n\nexport default Users;\n","import React from \"react\";\r\n\r\nclass AddUser extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            username: \"\"\r\n        };\r\n    }\r\n\r\n    onNameChange = event => {\r\n        this.setState({ name: event.target.value });\r\n    };\r\n\r\n    onUsernameChange = event => {\r\n        this.setState({ name: event.target.value });\r\n    };\r\n\r\n    onAddUser = () => {\r\n        fetch(\"https://jsonplaceholder.typicode.com/posts\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                name: this.state.name,\r\n                username: this.state.username\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => console.log(json));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Add user</h2>\r\n                <div>\r\n                    <label>Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        onChange={this.onNameChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Username</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        onChange={this.onUsernameChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"Add user\"\r\n                        onClick={this.onAddUser}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddUser;\r\n","import React from \"react\";\n\nclass Posts extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { posts: [] };\n    }\n\n    componentDidMount() {\n        const { id } = this.props.selectedUser;\n        fetch(\"https://jsonplaceholder.typicode.com/posts?userId=\" + id)\n            .then(res => res.json())\n            .then(data => this.setState({ posts: data }));\n    }\n\n    render() {\n        const { name, username } = this.props.selectedUser;\n        const posts = this.state.posts.map(post => {\n            return (\n                <li className=\"ph3 pv2 b--light-silver\" key={post.id}>\n                    <h3>{post.title}</h3>\n                    <p>{post.body}</p>\n                </li>\n            );\n        });\n        return (\n            <div>\n                <h1>{name}'s posts</h1>\n                <p className=\"black-50\">{username}</p>\n                <ul className=\"list\">{posts}</ul>\n            </div>\n        );\n    }\n}\n\nexport default Posts;\n","import React from \"react\";\r\n\r\nconst Navigation = ({ onRouteChange }) => {\r\n    return (\r\n        <nav className=\"bt bb tc mw8 center mt4 pointer athelas br4\">\r\n            <p\r\n                className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\"\r\n                onClick={() => onRouteChange(\"users\")}\r\n            >\r\n                Users\r\n            </p>\r\n            <p\r\n                className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\"\r\n                onClick={() => onRouteChange(\"addUser\")}\r\n            >\r\n                Add user\r\n            </p>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\nimport Users from \"./components/users\";\nimport AddUser from \"./components/addUser\";\nimport Posts from \"./components/posts\";\nimport Navigation from \"./components/navigation\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            route: \"users\",\n            selectedUser: {}\n        };\n\n        this.onSelectUser = this.onSelectUser.bind(this);\n    }\n\n    onRouteChange = route => {\n        this.setState({ route: route });\n    };\n\n    onSelectUser = user => {\n        this.setState({ route: \"posts\", selectedUser: user });\n    };\n\n    render() {\n        let page;\n        switch (this.state.route) {\n            case \"users\":\n                page = <Users onSelectUser={this.onSelectUser} />;\n                break;\n            case \"addUser\":\n                page = <AddUser />;\n                break;\n            case \"posts\":\n                page = <Posts selectedUser={this.state.selectedUser} />;\n                break;\n            default:\n                page = <Users />;\n                break;\n        }\n        return (\n            <div className=\"bb tc mw8 center mt4 athelas\">\n                <Navigation onRouteChange={this.onRouteChange} />\n                {page}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}